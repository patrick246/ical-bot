// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: ical-bot-backend/v1/ical_bot_backend.proto

package pb

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DefaultReminderMode int32

const (
	DefaultReminderMode_DEFAULT_REMINDER_MODE_UNKNOWN    DefaultReminderMode = 0
	DefaultReminderMode_DEFAULT_REMINDER_MODE_REPLACE    DefaultReminderMode = 2
	DefaultReminderMode_DEFAULT_REMINDER_MODE_ADD        DefaultReminderMode = 3
	DefaultReminderMode_DEFAULT_REMINDER_MODE_UNSET_ONLY DefaultReminderMode = 4
)

// Enum value maps for DefaultReminderMode.
var (
	DefaultReminderMode_name = map[int32]string{
		0: "DEFAULT_REMINDER_MODE_UNKNOWN",
		2: "DEFAULT_REMINDER_MODE_REPLACE",
		3: "DEFAULT_REMINDER_MODE_ADD",
		4: "DEFAULT_REMINDER_MODE_UNSET_ONLY",
	}
	DefaultReminderMode_value = map[string]int32{
		"DEFAULT_REMINDER_MODE_UNKNOWN":    0,
		"DEFAULT_REMINDER_MODE_REPLACE":    2,
		"DEFAULT_REMINDER_MODE_ADD":        3,
		"DEFAULT_REMINDER_MODE_UNSET_ONLY": 4,
	}
)

func (x DefaultReminderMode) Enum() *DefaultReminderMode {
	p := new(DefaultReminderMode)
	*p = x
	return p
}

func (x DefaultReminderMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefaultReminderMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_enumTypes[0].Descriptor()
}

func (DefaultReminderMode) Type() protoreflect.EnumType {
	return &file_ical_bot_backend_v1_ical_bot_backend_proto_enumTypes[0]
}

func (x DefaultReminderMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefaultReminderMode.Descriptor instead.
func (DefaultReminderMode) EnumDescriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{0}
}

type CreateCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Calendar      *Calendar              `protobuf:"bytes,1,opt,name=calendar,proto3" json:"calendar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCalendarRequest) Reset() {
	*x = CreateCalendarRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCalendarRequest) ProtoMessage() {}

func (x *CreateCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCalendarRequest.ProtoReflect.Descriptor instead.
func (*CreateCalendarRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCalendarRequest) GetCalendar() *Calendar {
	if x != nil {
		return x.Calendar
	}
	return nil
}

type GetCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCalendarRequest) Reset() {
	*x = GetCalendarRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarRequest) ProtoMessage() {}

func (x *GetCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarRequest.ProtoReflect.Descriptor instead.
func (*GetCalendarRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{1}
}

func (x *GetCalendarRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListCalendarsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageSize      int32                  `protobuf:"varint,1,opt,name=page_size,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,2,opt,name=page_token,proto3" json:"page_token,omitempty"`
	Filter        *ListCalendarsFilter   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarsRequest) Reset() {
	*x = ListCalendarsRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsRequest) ProtoMessage() {}

func (x *ListCalendarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsRequest.ProtoReflect.Descriptor instead.
func (*ListCalendarsRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{2}
}

func (x *ListCalendarsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCalendarsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCalendarsRequest) GetFilter() *ListCalendarsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListCalendarsFilter struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	LastSyncTimeBefore *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_sync_time_before,proto3" json:"last_sync_time_before,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListCalendarsFilter) Reset() {
	*x = ListCalendarsFilter{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsFilter) ProtoMessage() {}

func (x *ListCalendarsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsFilter.ProtoReflect.Descriptor instead.
func (*ListCalendarsFilter) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{3}
}

func (x *ListCalendarsFilter) GetLastSyncTimeBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSyncTimeBefore
	}
	return nil
}

type ListCalendarsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Calendars     []*Calendar            `protobuf:"bytes,1,rep,name=calendars,proto3" json:"calendars,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarsResponse) Reset() {
	*x = ListCalendarsResponse{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsResponse) ProtoMessage() {}

func (x *ListCalendarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsResponse.ProtoReflect.Descriptor instead.
func (*ListCalendarsResponse) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{4}
}

func (x *ListCalendarsResponse) GetCalendars() []*Calendar {
	if x != nil {
		return x.Calendars
	}
	return nil
}

func (x *ListCalendarsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Calendar      *Calendar              `protobuf:"bytes,1,opt,name=calendar,proto3" json:"calendar,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCalendarRequest) Reset() {
	*x = UpdateCalendarRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCalendarRequest) ProtoMessage() {}

func (x *UpdateCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCalendarRequest.ProtoReflect.Descriptor instead.
func (*UpdateCalendarRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCalendarRequest) GetCalendar() *Calendar {
	if x != nil {
		return x.Calendar
	}
	return nil
}

func (x *UpdateCalendarRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type DeleteCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCalendarRequest) Reset() {
	*x = DeleteCalendarRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarRequest) ProtoMessage() {}

func (x *DeleteCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarRequest.ProtoReflect.Descriptor instead.
func (*DeleteCalendarRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCalendarRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Calendar struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IcalUrl             string                 `protobuf:"bytes,3,opt,name=ical_url,proto3" json:"ical_url,omitempty"`
	LastSyncTime        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_sync_time,proto3" json:"last_sync_time,omitempty"`
	DefaultReminders    []*DefaultReminder     `protobuf:"bytes,5,rep,name=default_reminders,proto3" json:"default_reminders,omitempty"`
	DefaultReminderMode DefaultReminderMode    `protobuf:"varint,6,opt,name=default_reminder_mode,proto3,enum=ical_bot_backend.v1.DefaultReminderMode" json:"default_reminder_mode,omitempty"`
	LastSyncHash        []byte                 `protobuf:"bytes,7,opt,name=last_sync_hash,proto3" json:"last_sync_hash,omitempty"`
	LastSyncError       *status.Status         `protobuf:"bytes,8,opt,name=last_sync_error,json=last_import_error,proto3" json:"last_sync_error,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Calendar) Reset() {
	*x = Calendar{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Calendar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calendar) ProtoMessage() {}

func (x *Calendar) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calendar.ProtoReflect.Descriptor instead.
func (*Calendar) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{7}
}

func (x *Calendar) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Calendar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Calendar) GetIcalUrl() string {
	if x != nil {
		return x.IcalUrl
	}
	return ""
}

func (x *Calendar) GetLastSyncTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSyncTime
	}
	return nil
}

func (x *Calendar) GetDefaultReminders() []*DefaultReminder {
	if x != nil {
		return x.DefaultReminders
	}
	return nil
}

func (x *Calendar) GetDefaultReminderMode() DefaultReminderMode {
	if x != nil {
		return x.DefaultReminderMode
	}
	return DefaultReminderMode_DEFAULT_REMINDER_MODE_UNKNOWN
}

func (x *Calendar) GetLastSyncHash() []byte {
	if x != nil {
		return x.LastSyncHash
	}
	return nil
}

func (x *Calendar) GetLastSyncError() *status.Status {
	if x != nil {
		return x.LastSyncError
	}
	return nil
}

type DefaultReminder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Before        *durationpb.Duration   `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultReminder) Reset() {
	*x = DefaultReminder{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultReminder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultReminder) ProtoMessage() {}

func (x *DefaultReminder) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultReminder.ProtoReflect.Descriptor instead.
func (*DefaultReminder) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{8}
}

func (x *DefaultReminder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DefaultReminder) GetBefore() *durationpb.Duration {
	if x != nil {
		return x.Before
	}
	return nil
}

type GetChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChannelRequest) Reset() {
	*x = GetChannelRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelRequest) ProtoMessage() {}

func (x *GetChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelRequest.ProtoReflect.Descriptor instead.
func (*GetChannelRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{9}
}

func (x *GetChannelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListChannelsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageSize      int32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChannelsRequest) Reset() {
	*x = ListChannelsRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChannelsRequest) ProtoMessage() {}

func (x *ListChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChannelsRequest.ProtoReflect.Descriptor instead.
func (*ListChannelsRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{10}
}

func (x *ListChannelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListChannelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListChannelsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channels      []*Channel             `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChannelsResponse) Reset() {
	*x = ListChannelsResponse{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChannelsResponse) ProtoMessage() {}

func (x *ListChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChannelsResponse.ProtoReflect.Descriptor instead.
func (*ListChannelsResponse) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{11}
}

func (x *ListChannelsResponse) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ListChannelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *Channel               `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChannelRequest) Reset() {
	*x = CreateChannelRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelRequest) ProtoMessage() {}

func (x *CreateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateChannelRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{12}
}

func (x *CreateChannelRequest) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type UpdateChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *Channel               `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChannelRequest) Reset() {
	*x = UpdateChannelRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelRequest) ProtoMessage() {}

func (x *UpdateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdateChannelRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateChannelRequest) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *UpdateChannelRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type DeleteChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChannelRequest) Reset() {
	*x = DeleteChannelRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelRequest) ProtoMessage() {}

func (x *DeleteChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelRequest.ProtoReflect.Descriptor instead.
func (*DeleteChannelRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteChannelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Channel struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to ChannelType:
	//
	//	*Channel_Telegram
	//	*Channel_Matrix
	ChannelType   isChannel_ChannelType `protobuf_oneof:"channel_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Channel) Reset() {
	*x = Channel{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{15}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetChannelType() isChannel_ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return nil
}

func (x *Channel) GetTelegram() *TelegramChat {
	if x != nil {
		if x, ok := x.ChannelType.(*Channel_Telegram); ok {
			return x.Telegram
		}
	}
	return nil
}

func (x *Channel) GetMatrix() *MatrixChannel {
	if x != nil {
		if x, ok := x.ChannelType.(*Channel_Matrix); ok {
			return x.Matrix
		}
	}
	return nil
}

type isChannel_ChannelType interface {
	isChannel_ChannelType()
}

type Channel_Telegram struct {
	Telegram *TelegramChat `protobuf:"bytes,2,opt,name=telegram,proto3,oneof"`
}

type Channel_Matrix struct {
	Matrix *MatrixChannel `protobuf:"bytes,3,opt,name=matrix,proto3,oneof"`
}

func (*Channel_Telegram) isChannel_ChannelType() {}

func (*Channel_Matrix) isChannel_ChannelType() {}

type TelegramChat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelegramChat) Reset() {
	*x = TelegramChat{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelegramChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramChat) ProtoMessage() {}

func (x *TelegramChat) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramChat.ProtoReflect.Descriptor instead.
func (*TelegramChat) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{16}
}

func (x *TelegramChat) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TelegramChat) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TelegramChat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MatrixChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        string                 `protobuf:"bytes,1,opt,name=room_id,proto3" json:"room_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatrixChannel) Reset() {
	*x = MatrixChannel{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatrixChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatrixChannel) ProtoMessage() {}

func (x *MatrixChannel) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatrixChannel.ProtoReflect.Descriptor instead.
func (*MatrixChannel) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{17}
}

func (x *MatrixChannel) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatrixChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListCalendarChannelsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CalendarId    string                 `protobuf:"bytes,1,opt,name=calendar_id,proto3" json:"calendar_id,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarChannelsRequest) Reset() {
	*x = ListCalendarChannelsRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarChannelsRequest) ProtoMessage() {}

func (x *ListCalendarChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarChannelsRequest.ProtoReflect.Descriptor instead.
func (*ListCalendarChannelsRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{18}
}

func (x *ListCalendarChannelsRequest) GetCalendarId() string {
	if x != nil {
		return x.CalendarId
	}
	return ""
}

func (x *ListCalendarChannelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCalendarChannelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListCalendarChannelsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channels      []*Channel             `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarChannelsResponse) Reset() {
	*x = ListCalendarChannelsResponse{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarChannelsResponse) ProtoMessage() {}

func (x *ListCalendarChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarChannelsResponse.ProtoReflect.Descriptor instead.
func (*ListCalendarChannelsResponse) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{19}
}

func (x *ListCalendarChannelsResponse) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ListCalendarChannelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateCalendarChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CalendarId    string                 `protobuf:"bytes,1,opt,name=calendar_id,proto3" json:"calendar_id,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,proto3" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCalendarChannelRequest) Reset() {
	*x = CreateCalendarChannelRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCalendarChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCalendarChannelRequest) ProtoMessage() {}

func (x *CreateCalendarChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCalendarChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateCalendarChannelRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{20}
}

func (x *CreateCalendarChannelRequest) GetCalendarId() string {
	if x != nil {
		return x.CalendarId
	}
	return ""
}

func (x *CreateCalendarChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type DeleteCalendarChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CalendarId    string                 `protobuf:"bytes,1,opt,name=calendar_id,proto3" json:"calendar_id,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,proto3" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCalendarChannelRequest) Reset() {
	*x = DeleteCalendarChannelRequest{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCalendarChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarChannelRequest) ProtoMessage() {}

func (x *DeleteCalendarChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarChannelRequest.ProtoReflect.Descriptor instead.
func (*DeleteCalendarChannelRequest) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteCalendarChannelRequest) GetCalendarId() string {
	if x != nil {
		return x.CalendarId
	}
	return ""
}

func (x *DeleteCalendarChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type PageToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastId        string                 `protobuf:"bytes,1,opt,name=last_id,proto3" json:"last_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageToken) Reset() {
	*x = PageToken{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageToken) ProtoMessage() {}

func (x *PageToken) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageToken.ProtoReflect.Descriptor instead.
func (*PageToken) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{22}
}

func (x *PageToken) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

type EventNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventNotification) Reset() {
	*x = EventNotification{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotification) ProtoMessage() {}

func (x *EventNotification) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotification.ProtoReflect.Descriptor instead.
func (*EventNotification) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{23}
}

func (x *EventNotification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EventNotificationAcknowledge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventNotificationAcknowledge) Reset() {
	*x = EventNotificationAcknowledge{}
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventNotificationAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotificationAcknowledge) ProtoMessage() {}

func (x *EventNotificationAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotificationAcknowledge.ProtoReflect.Descriptor instead.
func (*EventNotificationAcknowledge) Descriptor() ([]byte, []int) {
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP(), []int{24}
}

func (x *EventNotificationAcknowledge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_ical_bot_backend_v1_ical_bot_backend_proto protoreflect.FileDescriptor

var file_ical_bot_backend_v1_ical_bot_backend_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x62, 0x6f, 0x74, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x52, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x67, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62,
	0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62,
	0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x27, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x03, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75,
	0x72, 0x6c, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x54, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x78, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa8,
	0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x06, 0x6d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x7d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x82, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x60, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0x23, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x2a, 0xa0, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x49, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45,
	0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10,
	0x03, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x4d,
	0x49, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x32, 0x85, 0x0f, 0x0a, 0x0e, 0x49, 0x63, 0x61, 0x6c,
	0x42, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x27, 0x2e, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x22, 0x28, 0xba, 0x47, 0x0b, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x12, 0x29, 0x2e,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0xba, 0x47, 0x0b, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x2a, 0x2e, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x22, 0x23, 0xba, 0x47, 0x0b, 0x0a, 0x09, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0d, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x12, 0x8e, 0x01, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12,
	0x2a, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x22, 0x31, 0xba, 0x47, 0x0b, 0x0a,
	0x09, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x32, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x7e, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12,
	0x2a, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x28, 0xba, 0x47, 0x0b, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6d, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x79, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x2e, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f,
	0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x6e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x7b, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x32, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x69, 0x64, 0x7d, 0x12, 0x6d, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xb7, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x2e, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0xba, 0x47, 0x0b, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0xa4, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x31, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62,
	0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3a, 0xba, 0x47, 0x0b, 0x0a, 0x09, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x24,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x31,
	0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x47, 0xba, 0x47, 0x0b, 0x0a, 0x09,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a,
	0x31, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x1a, 0x26, 0x2e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0xa6, 0x02, 0xba, 0x47, 0xde, 0x01, 0x12, 0x4f, 0x0a, 0x14, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x62,
	0x6f, 0x74, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x12, 0x32,
	0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x20, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x69, 0x43, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x24, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x38, 0x30,
	0x12, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2a, 0x20, 0x3a,
	0x1e, 0x0a, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0f,
	0x0a, 0x0d, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x2a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x3a,
	0x23, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x12, 0x16, 0x69, 0x43,
	0x61, 0x6c, 0x20, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x73, 0x79, 0x6e, 0x63, 0x3a, 0x1e, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x32, 0x34, 0x36, 0x2f, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x62, 0x6f, 0x74, 0x2f, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x62, 0x6f, 0x74, 0x2d, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x58, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescOnce sync.Once
	file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescData []byte
)

func file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescGZIP() []byte {
	file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescOnce.Do(func() {
		file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ical_bot_backend_v1_ical_bot_backend_proto_rawDesc), len(file_ical_bot_backend_v1_ical_bot_backend_proto_rawDesc)))
	})
	return file_ical_bot_backend_v1_ical_bot_backend_proto_rawDescData
}

var file_ical_bot_backend_v1_ical_bot_backend_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_ical_bot_backend_v1_ical_bot_backend_proto_goTypes = []any{
	(DefaultReminderMode)(0),             // 0: ical_bot_backend.v1.DefaultReminderMode
	(*CreateCalendarRequest)(nil),        // 1: ical_bot_backend.v1.CreateCalendarRequest
	(*GetCalendarRequest)(nil),           // 2: ical_bot_backend.v1.GetCalendarRequest
	(*ListCalendarsRequest)(nil),         // 3: ical_bot_backend.v1.ListCalendarsRequest
	(*ListCalendarsFilter)(nil),          // 4: ical_bot_backend.v1.ListCalendarsFilter
	(*ListCalendarsResponse)(nil),        // 5: ical_bot_backend.v1.ListCalendarsResponse
	(*UpdateCalendarRequest)(nil),        // 6: ical_bot_backend.v1.UpdateCalendarRequest
	(*DeleteCalendarRequest)(nil),        // 7: ical_bot_backend.v1.DeleteCalendarRequest
	(*Calendar)(nil),                     // 8: ical_bot_backend.v1.Calendar
	(*DefaultReminder)(nil),              // 9: ical_bot_backend.v1.DefaultReminder
	(*GetChannelRequest)(nil),            // 10: ical_bot_backend.v1.GetChannelRequest
	(*ListChannelsRequest)(nil),          // 11: ical_bot_backend.v1.ListChannelsRequest
	(*ListChannelsResponse)(nil),         // 12: ical_bot_backend.v1.ListChannelsResponse
	(*CreateChannelRequest)(nil),         // 13: ical_bot_backend.v1.CreateChannelRequest
	(*UpdateChannelRequest)(nil),         // 14: ical_bot_backend.v1.UpdateChannelRequest
	(*DeleteChannelRequest)(nil),         // 15: ical_bot_backend.v1.DeleteChannelRequest
	(*Channel)(nil),                      // 16: ical_bot_backend.v1.Channel
	(*TelegramChat)(nil),                 // 17: ical_bot_backend.v1.TelegramChat
	(*MatrixChannel)(nil),                // 18: ical_bot_backend.v1.MatrixChannel
	(*ListCalendarChannelsRequest)(nil),  // 19: ical_bot_backend.v1.ListCalendarChannelsRequest
	(*ListCalendarChannelsResponse)(nil), // 20: ical_bot_backend.v1.ListCalendarChannelsResponse
	(*CreateCalendarChannelRequest)(nil), // 21: ical_bot_backend.v1.CreateCalendarChannelRequest
	(*DeleteCalendarChannelRequest)(nil), // 22: ical_bot_backend.v1.DeleteCalendarChannelRequest
	(*PageToken)(nil),                    // 23: ical_bot_backend.v1.PageToken
	(*EventNotification)(nil),            // 24: ical_bot_backend.v1.EventNotification
	(*EventNotificationAcknowledge)(nil), // 25: ical_bot_backend.v1.EventNotificationAcknowledge
	(*timestamppb.Timestamp)(nil),        // 26: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),        // 27: google.protobuf.FieldMask
	(*status.Status)(nil),                // 28: google.rpc.Status
	(*durationpb.Duration)(nil),          // 29: google.protobuf.Duration
	(*emptypb.Empty)(nil),                // 30: google.protobuf.Empty
}
var file_ical_bot_backend_v1_ical_bot_backend_proto_depIdxs = []int32{
	8,  // 0: ical_bot_backend.v1.CreateCalendarRequest.calendar:type_name -> ical_bot_backend.v1.Calendar
	4,  // 1: ical_bot_backend.v1.ListCalendarsRequest.filter:type_name -> ical_bot_backend.v1.ListCalendarsFilter
	26, // 2: ical_bot_backend.v1.ListCalendarsFilter.last_sync_time_before:type_name -> google.protobuf.Timestamp
	8,  // 3: ical_bot_backend.v1.ListCalendarsResponse.calendars:type_name -> ical_bot_backend.v1.Calendar
	8,  // 4: ical_bot_backend.v1.UpdateCalendarRequest.calendar:type_name -> ical_bot_backend.v1.Calendar
	27, // 5: ical_bot_backend.v1.UpdateCalendarRequest.field_mask:type_name -> google.protobuf.FieldMask
	26, // 6: ical_bot_backend.v1.Calendar.last_sync_time:type_name -> google.protobuf.Timestamp
	9,  // 7: ical_bot_backend.v1.Calendar.default_reminders:type_name -> ical_bot_backend.v1.DefaultReminder
	0,  // 8: ical_bot_backend.v1.Calendar.default_reminder_mode:type_name -> ical_bot_backend.v1.DefaultReminderMode
	28, // 9: ical_bot_backend.v1.Calendar.last_sync_error:type_name -> google.rpc.Status
	29, // 10: ical_bot_backend.v1.DefaultReminder.before:type_name -> google.protobuf.Duration
	16, // 11: ical_bot_backend.v1.ListChannelsResponse.channels:type_name -> ical_bot_backend.v1.Channel
	16, // 12: ical_bot_backend.v1.CreateChannelRequest.channel:type_name -> ical_bot_backend.v1.Channel
	16, // 13: ical_bot_backend.v1.UpdateChannelRequest.channel:type_name -> ical_bot_backend.v1.Channel
	27, // 14: ical_bot_backend.v1.UpdateChannelRequest.field_mask:type_name -> google.protobuf.FieldMask
	17, // 15: ical_bot_backend.v1.Channel.telegram:type_name -> ical_bot_backend.v1.TelegramChat
	18, // 16: ical_bot_backend.v1.Channel.matrix:type_name -> ical_bot_backend.v1.MatrixChannel
	16, // 17: ical_bot_backend.v1.ListCalendarChannelsResponse.channels:type_name -> ical_bot_backend.v1.Channel
	2,  // 18: ical_bot_backend.v1.IcalBotService.GetCalendar:input_type -> ical_bot_backend.v1.GetCalendarRequest
	3,  // 19: ical_bot_backend.v1.IcalBotService.ListCalendars:input_type -> ical_bot_backend.v1.ListCalendarsRequest
	1,  // 20: ical_bot_backend.v1.IcalBotService.CreateCalendar:input_type -> ical_bot_backend.v1.CreateCalendarRequest
	6,  // 21: ical_bot_backend.v1.IcalBotService.UpdateCalendar:input_type -> ical_bot_backend.v1.UpdateCalendarRequest
	7,  // 22: ical_bot_backend.v1.IcalBotService.DeleteCalendar:input_type -> ical_bot_backend.v1.DeleteCalendarRequest
	10, // 23: ical_bot_backend.v1.IcalBotService.GetChannel:input_type -> ical_bot_backend.v1.GetChannelRequest
	11, // 24: ical_bot_backend.v1.IcalBotService.ListChannels:input_type -> ical_bot_backend.v1.ListChannelsRequest
	13, // 25: ical_bot_backend.v1.IcalBotService.CreateChannel:input_type -> ical_bot_backend.v1.CreateChannelRequest
	14, // 26: ical_bot_backend.v1.IcalBotService.UpdateChannel:input_type -> ical_bot_backend.v1.UpdateChannelRequest
	15, // 27: ical_bot_backend.v1.IcalBotService.DeleteChannel:input_type -> ical_bot_backend.v1.DeleteChannelRequest
	19, // 28: ical_bot_backend.v1.IcalBotService.ListCalendarChannels:input_type -> ical_bot_backend.v1.ListCalendarChannelsRequest
	21, // 29: ical_bot_backend.v1.IcalBotService.CreateCalendarChannel:input_type -> ical_bot_backend.v1.CreateCalendarChannelRequest
	22, // 30: ical_bot_backend.v1.IcalBotService.DeleteCalendarChannel:input_type -> ical_bot_backend.v1.DeleteCalendarChannelRequest
	25, // 31: ical_bot_backend.v1.IcalBotService.StreamEventNotifications:input_type -> ical_bot_backend.v1.EventNotificationAcknowledge
	8,  // 32: ical_bot_backend.v1.IcalBotService.GetCalendar:output_type -> ical_bot_backend.v1.Calendar
	5,  // 33: ical_bot_backend.v1.IcalBotService.ListCalendars:output_type -> ical_bot_backend.v1.ListCalendarsResponse
	8,  // 34: ical_bot_backend.v1.IcalBotService.CreateCalendar:output_type -> ical_bot_backend.v1.Calendar
	8,  // 35: ical_bot_backend.v1.IcalBotService.UpdateCalendar:output_type -> ical_bot_backend.v1.Calendar
	30, // 36: ical_bot_backend.v1.IcalBotService.DeleteCalendar:output_type -> google.protobuf.Empty
	16, // 37: ical_bot_backend.v1.IcalBotService.GetChannel:output_type -> ical_bot_backend.v1.Channel
	12, // 38: ical_bot_backend.v1.IcalBotService.ListChannels:output_type -> ical_bot_backend.v1.ListChannelsResponse
	16, // 39: ical_bot_backend.v1.IcalBotService.CreateChannel:output_type -> ical_bot_backend.v1.Channel
	16, // 40: ical_bot_backend.v1.IcalBotService.UpdateChannel:output_type -> ical_bot_backend.v1.Channel
	30, // 41: ical_bot_backend.v1.IcalBotService.DeleteChannel:output_type -> google.protobuf.Empty
	20, // 42: ical_bot_backend.v1.IcalBotService.ListCalendarChannels:output_type -> ical_bot_backend.v1.ListCalendarChannelsResponse
	16, // 43: ical_bot_backend.v1.IcalBotService.CreateCalendarChannel:output_type -> ical_bot_backend.v1.Channel
	30, // 44: ical_bot_backend.v1.IcalBotService.DeleteCalendarChannel:output_type -> google.protobuf.Empty
	24, // 45: ical_bot_backend.v1.IcalBotService.StreamEventNotifications:output_type -> ical_bot_backend.v1.EventNotification
	32, // [32:46] is the sub-list for method output_type
	18, // [18:32] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_ical_bot_backend_v1_ical_bot_backend_proto_init() }
func file_ical_bot_backend_v1_ical_bot_backend_proto_init() {
	if File_ical_bot_backend_v1_ical_bot_backend_proto != nil {
		return
	}
	file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes[15].OneofWrappers = []any{
		(*Channel_Telegram)(nil),
		(*Channel_Matrix)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ical_bot_backend_v1_ical_bot_backend_proto_rawDesc), len(file_ical_bot_backend_v1_ical_bot_backend_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ical_bot_backend_v1_ical_bot_backend_proto_goTypes,
		DependencyIndexes: file_ical_bot_backend_v1_ical_bot_backend_proto_depIdxs,
		EnumInfos:         file_ical_bot_backend_v1_ical_bot_backend_proto_enumTypes,
		MessageInfos:      file_ical_bot_backend_v1_ical_bot_backend_proto_msgTypes,
	}.Build()
	File_ical_bot_backend_v1_ical_bot_backend_proto = out.File
	file_ical_bot_backend_v1_ical_bot_backend_proto_goTypes = nil
	file_ical_bot_backend_v1_ical_bot_backend_proto_depIdxs = nil
}
