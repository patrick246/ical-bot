// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ical-bot-backend/v1/ical_bot_backend.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IcalBotService_GetCalendar_FullMethodName              = "/ical_bot_backend.v1.IcalBotService/GetCalendar"
	IcalBotService_ListCalendars_FullMethodName            = "/ical_bot_backend.v1.IcalBotService/ListCalendars"
	IcalBotService_CreateCalendar_FullMethodName           = "/ical_bot_backend.v1.IcalBotService/CreateCalendar"
	IcalBotService_UpdateCalendar_FullMethodName           = "/ical_bot_backend.v1.IcalBotService/UpdateCalendar"
	IcalBotService_DeleteCalendar_FullMethodName           = "/ical_bot_backend.v1.IcalBotService/DeleteCalendar"
	IcalBotService_GetChannel_FullMethodName               = "/ical_bot_backend.v1.IcalBotService/GetChannel"
	IcalBotService_ListChannels_FullMethodName             = "/ical_bot_backend.v1.IcalBotService/ListChannels"
	IcalBotService_CreateChannel_FullMethodName            = "/ical_bot_backend.v1.IcalBotService/CreateChannel"
	IcalBotService_UpdateChannel_FullMethodName            = "/ical_bot_backend.v1.IcalBotService/UpdateChannel"
	IcalBotService_DeleteChannel_FullMethodName            = "/ical_bot_backend.v1.IcalBotService/DeleteChannel"
	IcalBotService_ListCalendarChannels_FullMethodName     = "/ical_bot_backend.v1.IcalBotService/ListCalendarChannels"
	IcalBotService_CreateCalendarChannel_FullMethodName    = "/ical_bot_backend.v1.IcalBotService/CreateCalendarChannel"
	IcalBotService_DeleteCalendarChannel_FullMethodName    = "/ical_bot_backend.v1.IcalBotService/DeleteCalendarChannel"
	IcalBotService_StreamEventNotifications_FullMethodName = "/ical_bot_backend.v1.IcalBotService/StreamEventNotifications"
)

// IcalBotServiceClient is the client API for IcalBotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IcalBotServiceClient interface {
	// Calendar
	GetCalendar(ctx context.Context, in *GetCalendarRequest, opts ...grpc.CallOption) (*Calendar, error)
	ListCalendars(ctx context.Context, in *ListCalendarsRequest, opts ...grpc.CallOption) (*ListCalendarsResponse, error)
	CreateCalendar(ctx context.Context, in *CreateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error)
	UpdateCalendar(ctx context.Context, in *UpdateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error)
	DeleteCalendar(ctx context.Context, in *DeleteCalendarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Channels
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	ListChannels(ctx context.Context, in *ListChannelsRequest, opts ...grpc.CallOption) (*ListChannelsResponse, error)
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Calendar-Channels
	ListCalendarChannels(ctx context.Context, in *ListCalendarChannelsRequest, opts ...grpc.CallOption) (*ListCalendarChannelsResponse, error)
	CreateCalendarChannel(ctx context.Context, in *CreateCalendarChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	DeleteCalendarChannel(ctx context.Context, in *DeleteCalendarChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Bot API
	StreamEventNotifications(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventNotificationAcknowledge, EventNotification], error)
}

type icalBotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIcalBotServiceClient(cc grpc.ClientConnInterface) IcalBotServiceClient {
	return &icalBotServiceClient{cc}
}

func (c *icalBotServiceClient) GetCalendar(ctx context.Context, in *GetCalendarRequest, opts ...grpc.CallOption) (*Calendar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Calendar)
	err := c.cc.Invoke(ctx, IcalBotService_GetCalendar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) ListCalendars(ctx context.Context, in *ListCalendarsRequest, opts ...grpc.CallOption) (*ListCalendarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCalendarsResponse)
	err := c.cc.Invoke(ctx, IcalBotService_ListCalendars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) CreateCalendar(ctx context.Context, in *CreateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Calendar)
	err := c.cc.Invoke(ctx, IcalBotService_CreateCalendar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) UpdateCalendar(ctx context.Context, in *UpdateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Calendar)
	err := c.cc.Invoke(ctx, IcalBotService_UpdateCalendar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) DeleteCalendar(ctx context.Context, in *DeleteCalendarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IcalBotService_DeleteCalendar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channel)
	err := c.cc.Invoke(ctx, IcalBotService_GetChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) ListChannels(ctx context.Context, in *ListChannelsRequest, opts ...grpc.CallOption) (*ListChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChannelsResponse)
	err := c.cc.Invoke(ctx, IcalBotService_ListChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channel)
	err := c.cc.Invoke(ctx, IcalBotService_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channel)
	err := c.cc.Invoke(ctx, IcalBotService_UpdateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IcalBotService_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) ListCalendarChannels(ctx context.Context, in *ListCalendarChannelsRequest, opts ...grpc.CallOption) (*ListCalendarChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCalendarChannelsResponse)
	err := c.cc.Invoke(ctx, IcalBotService_ListCalendarChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) CreateCalendarChannel(ctx context.Context, in *CreateCalendarChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channel)
	err := c.cc.Invoke(ctx, IcalBotService_CreateCalendarChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) DeleteCalendarChannel(ctx context.Context, in *DeleteCalendarChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IcalBotService_DeleteCalendarChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icalBotServiceClient) StreamEventNotifications(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventNotificationAcknowledge, EventNotification], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IcalBotService_ServiceDesc.Streams[0], IcalBotService_StreamEventNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventNotificationAcknowledge, EventNotification]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IcalBotService_StreamEventNotificationsClient = grpc.BidiStreamingClient[EventNotificationAcknowledge, EventNotification]

// IcalBotServiceServer is the server API for IcalBotService service.
// All implementations must embed UnimplementedIcalBotServiceServer
// for forward compatibility.
type IcalBotServiceServer interface {
	// Calendar
	GetCalendar(context.Context, *GetCalendarRequest) (*Calendar, error)
	ListCalendars(context.Context, *ListCalendarsRequest) (*ListCalendarsResponse, error)
	CreateCalendar(context.Context, *CreateCalendarRequest) (*Calendar, error)
	UpdateCalendar(context.Context, *UpdateCalendarRequest) (*Calendar, error)
	DeleteCalendar(context.Context, *DeleteCalendarRequest) (*emptypb.Empty, error)
	// Channels
	GetChannel(context.Context, *GetChannelRequest) (*Channel, error)
	ListChannels(context.Context, *ListChannelsRequest) (*ListChannelsResponse, error)
	CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error)
	UpdateChannel(context.Context, *UpdateChannelRequest) (*Channel, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*emptypb.Empty, error)
	// Calendar-Channels
	ListCalendarChannels(context.Context, *ListCalendarChannelsRequest) (*ListCalendarChannelsResponse, error)
	CreateCalendarChannel(context.Context, *CreateCalendarChannelRequest) (*Channel, error)
	DeleteCalendarChannel(context.Context, *DeleteCalendarChannelRequest) (*emptypb.Empty, error)
	// Bot API
	StreamEventNotifications(grpc.BidiStreamingServer[EventNotificationAcknowledge, EventNotification]) error
	mustEmbedUnimplementedIcalBotServiceServer()
}

// UnimplementedIcalBotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIcalBotServiceServer struct{}

func (UnimplementedIcalBotServiceServer) GetCalendar(context.Context, *GetCalendarRequest) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalendar not implemented")
}
func (UnimplementedIcalBotServiceServer) ListCalendars(context.Context, *ListCalendarsRequest) (*ListCalendarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCalendars not implemented")
}
func (UnimplementedIcalBotServiceServer) CreateCalendar(context.Context, *CreateCalendarRequest) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCalendar not implemented")
}
func (UnimplementedIcalBotServiceServer) UpdateCalendar(context.Context, *UpdateCalendarRequest) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCalendar not implemented")
}
func (UnimplementedIcalBotServiceServer) DeleteCalendar(context.Context, *DeleteCalendarRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCalendar not implemented")
}
func (UnimplementedIcalBotServiceServer) GetChannel(context.Context, *GetChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedIcalBotServiceServer) ListChannels(context.Context, *ListChannelsRequest) (*ListChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (UnimplementedIcalBotServiceServer) CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedIcalBotServiceServer) UpdateChannel(context.Context, *UpdateChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedIcalBotServiceServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedIcalBotServiceServer) ListCalendarChannels(context.Context, *ListCalendarChannelsRequest) (*ListCalendarChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCalendarChannels not implemented")
}
func (UnimplementedIcalBotServiceServer) CreateCalendarChannel(context.Context, *CreateCalendarChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCalendarChannel not implemented")
}
func (UnimplementedIcalBotServiceServer) DeleteCalendarChannel(context.Context, *DeleteCalendarChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCalendarChannel not implemented")
}
func (UnimplementedIcalBotServiceServer) StreamEventNotifications(grpc.BidiStreamingServer[EventNotificationAcknowledge, EventNotification]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEventNotifications not implemented")
}
func (UnimplementedIcalBotServiceServer) mustEmbedUnimplementedIcalBotServiceServer() {}
func (UnimplementedIcalBotServiceServer) testEmbeddedByValue()                        {}

// UnsafeIcalBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IcalBotServiceServer will
// result in compilation errors.
type UnsafeIcalBotServiceServer interface {
	mustEmbedUnimplementedIcalBotServiceServer()
}

func RegisterIcalBotServiceServer(s grpc.ServiceRegistrar, srv IcalBotServiceServer) {
	// If the following call pancis, it indicates UnimplementedIcalBotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IcalBotService_ServiceDesc, srv)
}

func _IcalBotService_GetCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).GetCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_GetCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).GetCalendar(ctx, req.(*GetCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_ListCalendars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCalendarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).ListCalendars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_ListCalendars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).ListCalendars(ctx, req.(*ListCalendarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_CreateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).CreateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_CreateCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).CreateCalendar(ctx, req.(*CreateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_UpdateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).UpdateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_UpdateCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).UpdateCalendar(ctx, req.(*UpdateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_DeleteCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).DeleteCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_DeleteCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).DeleteCalendar(ctx, req.(*DeleteCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_ListChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).ListChannels(ctx, req.(*ListChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_UpdateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).UpdateChannel(ctx, req.(*UpdateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_ListCalendarChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCalendarChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).ListCalendarChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_ListCalendarChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).ListCalendarChannels(ctx, req.(*ListCalendarChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_CreateCalendarChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCalendarChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).CreateCalendarChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_CreateCalendarChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).CreateCalendarChannel(ctx, req.(*CreateCalendarChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_DeleteCalendarChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCalendarChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcalBotServiceServer).DeleteCalendarChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcalBotService_DeleteCalendarChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcalBotServiceServer).DeleteCalendarChannel(ctx, req.(*DeleteCalendarChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcalBotService_StreamEventNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IcalBotServiceServer).StreamEventNotifications(&grpc.GenericServerStream[EventNotificationAcknowledge, EventNotification]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IcalBotService_StreamEventNotificationsServer = grpc.BidiStreamingServer[EventNotificationAcknowledge, EventNotification]

// IcalBotService_ServiceDesc is the grpc.ServiceDesc for IcalBotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IcalBotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ical_bot_backend.v1.IcalBotService",
	HandlerType: (*IcalBotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCalendar",
			Handler:    _IcalBotService_GetCalendar_Handler,
		},
		{
			MethodName: "ListCalendars",
			Handler:    _IcalBotService_ListCalendars_Handler,
		},
		{
			MethodName: "CreateCalendar",
			Handler:    _IcalBotService_CreateCalendar_Handler,
		},
		{
			MethodName: "UpdateCalendar",
			Handler:    _IcalBotService_UpdateCalendar_Handler,
		},
		{
			MethodName: "DeleteCalendar",
			Handler:    _IcalBotService_DeleteCalendar_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _IcalBotService_GetChannel_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _IcalBotService_ListChannels_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _IcalBotService_CreateChannel_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _IcalBotService_UpdateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _IcalBotService_DeleteChannel_Handler,
		},
		{
			MethodName: "ListCalendarChannels",
			Handler:    _IcalBotService_ListCalendarChannels_Handler,
		},
		{
			MethodName: "CreateCalendarChannel",
			Handler:    _IcalBotService_CreateCalendarChannel_Handler,
		},
		{
			MethodName: "DeleteCalendarChannel",
			Handler:    _IcalBotService_DeleteCalendarChannel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEventNotifications",
			Handler:       _IcalBotService_StreamEventNotifications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ical-bot-backend/v1/ical_bot_backend.proto",
}
