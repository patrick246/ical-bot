// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ical-bot-backend/v1/ical_bot_backend.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCalendarRequestMultiError, or nil if none found.
func (m *CreateCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCalendarRequestValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCalendarRequestMultiError(errors)
	}

	return nil
}

// CreateCalendarRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCalendarRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCalendarRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCalendarRequestMultiError) AllErrors() []error { return m }

// CreateCalendarRequestValidationError is the validation error returned by
// CreateCalendarRequest.Validate if the designated constraints aren't met.
type CreateCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCalendarRequestValidationError) ErrorName() string {
	return "CreateCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCalendarRequestValidationError{}

// Validate checks the field values on GetCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCalendarRequestMultiError, or nil if none found.
func (m *GetCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCalendarRequestMultiError(errors)
	}

	return nil
}

// GetCalendarRequestMultiError is an error wrapping multiple validation errors
// returned by GetCalendarRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCalendarRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCalendarRequestMultiError) AllErrors() []error { return m }

// GetCalendarRequestValidationError is the validation error returned by
// GetCalendarRequest.Validate if the designated constraints aren't met.
type GetCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCalendarRequestValidationError) ErrorName() string {
	return "GetCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCalendarRequestValidationError{}

// Validate checks the field values on ListCalendarsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarsRequestMultiError, or nil if none found.
func (m *ListCalendarsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCalendarsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCalendarsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCalendarsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCalendarsRequestMultiError(errors)
	}

	return nil
}

// ListCalendarsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCalendarsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCalendarsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarsRequestMultiError) AllErrors() []error { return m }

// ListCalendarsRequestValidationError is the validation error returned by
// ListCalendarsRequest.Validate if the designated constraints aren't met.
type ListCalendarsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarsRequestValidationError) ErrorName() string {
	return "ListCalendarsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarsRequestValidationError{}

// Validate checks the field values on ListCalendarsFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarsFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarsFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarsFilterMultiError, or nil if none found.
func (m *ListCalendarsFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarsFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastSyncTimeBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCalendarsFilterValidationError{
					field:  "LastSyncTimeBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCalendarsFilterValidationError{
					field:  "LastSyncTimeBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSyncTimeBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCalendarsFilterValidationError{
				field:  "LastSyncTimeBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCalendarsFilterMultiError(errors)
	}

	return nil
}

// ListCalendarsFilterMultiError is an error wrapping multiple validation
// errors returned by ListCalendarsFilter.ValidateAll() if the designated
// constraints aren't met.
type ListCalendarsFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarsFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarsFilterMultiError) AllErrors() []error { return m }

// ListCalendarsFilterValidationError is the validation error returned by
// ListCalendarsFilter.Validate if the designated constraints aren't met.
type ListCalendarsFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarsFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarsFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarsFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarsFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarsFilterValidationError) ErrorName() string {
	return "ListCalendarsFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarsFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarsFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarsFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarsFilterValidationError{}

// Validate checks the field values on ListCalendarsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarsResponseMultiError, or nil if none found.
func (m *ListCalendarsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCalendars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCalendarsResponseValidationError{
						field:  fmt.Sprintf("Calendars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCalendarsResponseValidationError{
						field:  fmt.Sprintf("Calendars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarsResponseValidationError{
					field:  fmt.Sprintf("Calendars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListCalendarsResponseMultiError(errors)
	}

	return nil
}

// ListCalendarsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCalendarsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCalendarsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarsResponseMultiError) AllErrors() []error { return m }

// ListCalendarsResponseValidationError is the validation error returned by
// ListCalendarsResponse.Validate if the designated constraints aren't met.
type ListCalendarsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarsResponseValidationError) ErrorName() string {
	return "ListCalendarsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarsResponseValidationError{}

// Validate checks the field values on UpdateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCalendarRequestMultiError, or nil if none found.
func (m *UpdateCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCalendarRequestValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCalendarRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCalendarRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCalendarRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCalendarRequestMultiError(errors)
	}

	return nil
}

// UpdateCalendarRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCalendarRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCalendarRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCalendarRequestMultiError) AllErrors() []error { return m }

// UpdateCalendarRequestValidationError is the validation error returned by
// UpdateCalendarRequest.Validate if the designated constraints aren't met.
type UpdateCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCalendarRequestValidationError) ErrorName() string {
	return "UpdateCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCalendarRequestValidationError{}

// Validate checks the field values on DeleteCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCalendarRequestMultiError, or nil if none found.
func (m *DeleteCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCalendarRequestMultiError(errors)
	}

	return nil
}

// DeleteCalendarRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCalendarRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarRequestMultiError) AllErrors() []error { return m }

// DeleteCalendarRequestValidationError is the validation error returned by
// DeleteCalendarRequest.Validate if the designated constraints aren't met.
type DeleteCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarRequestValidationError) ErrorName() string {
	return "DeleteCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarRequestValidationError{}

// Validate checks the field values on Calendar with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Calendar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Calendar with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CalendarMultiError, or nil
// if none found.
func (m *Calendar) ValidateAll() error {
	return m.validate(true)
}

func (m *Calendar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IcalUrl

	if all {
		switch v := interface{}(m.GetLastSyncTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalendarValidationError{
					field:  "LastSyncTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalendarValidationError{
					field:  "LastSyncTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSyncTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalendarValidationError{
				field:  "LastSyncTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CalendarMultiError(errors)
	}

	return nil
}

// CalendarMultiError is an error wrapping multiple validation errors returned
// by Calendar.ValidateAll() if the designated constraints aren't met.
type CalendarMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalendarMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalendarMultiError) AllErrors() []error { return m }

// CalendarValidationError is the validation error returned by
// Calendar.Validate if the designated constraints aren't met.
type CalendarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalendarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalendarValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalendarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalendarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalendarValidationError) ErrorName() string { return "CalendarValidationError" }

// Error satisfies the builtin error interface
func (e CalendarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalendar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalendarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalendarValidationError{}

// Validate checks the field values on GetChannelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelRequestMultiError, or nil if none found.
func (m *GetChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetChannelRequestMultiError(errors)
	}

	return nil
}

// GetChannelRequestMultiError is an error wrapping multiple validation errors
// returned by GetChannelRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelRequestMultiError) AllErrors() []error { return m }

// GetChannelRequestValidationError is the validation error returned by
// GetChannelRequest.Validate if the designated constraints aren't met.
type GetChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelRequestValidationError) ErrorName() string {
	return "GetChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelRequestValidationError{}

// Validate checks the field values on ListChannelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChannelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelsRequestMultiError, or nil if none found.
func (m *ListChannelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListChannelsRequestMultiError(errors)
	}

	return nil
}

// ListChannelsRequestMultiError is an error wrapping multiple validation
// errors returned by ListChannelsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListChannelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelsRequestMultiError) AllErrors() []error { return m }

// ListChannelsRequestValidationError is the validation error returned by
// ListChannelsRequest.Validate if the designated constraints aren't met.
type ListChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelsRequestValidationError) ErrorName() string {
	return "ListChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelsRequestValidationError{}

// Validate checks the field values on ListChannelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChannelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelsResponseMultiError, or nil if none found.
func (m *ListChannelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChannelsResponseValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChannelsResponseValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChannelsResponseValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListChannelsResponseMultiError(errors)
	}

	return nil
}

// ListChannelsResponseMultiError is an error wrapping multiple validation
// errors returned by ListChannelsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListChannelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelsResponseMultiError) AllErrors() []error { return m }

// ListChannelsResponseValidationError is the validation error returned by
// ListChannelsResponse.Validate if the designated constraints aren't met.
type ListChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelsResponseValidationError) ErrorName() string {
	return "ListChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelsResponseValidationError{}

// Validate checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChannelRequestMultiError, or nil if none found.
func (m *CreateChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateChannelRequestValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateChannelRequestValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChannelRequestValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateChannelRequestMultiError(errors)
	}

	return nil
}

// CreateChannelRequestMultiError is an error wrapping multiple validation
// errors returned by CreateChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChannelRequestMultiError) AllErrors() []error { return m }

// CreateChannelRequestValidationError is the validation error returned by
// CreateChannelRequest.Validate if the designated constraints aren't met.
type CreateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelRequestValidationError) ErrorName() string {
	return "CreateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelRequestValidationError{}

// Validate checks the field values on UpdateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelRequestMultiError, or nil if none found.
func (m *UpdateChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateChannelRequestValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateChannelRequestValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChannelRequestValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateChannelRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateChannelRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChannelRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateChannelRequestMultiError(errors)
	}

	return nil
}

// UpdateChannelRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelRequestMultiError) AllErrors() []error { return m }

// UpdateChannelRequestValidationError is the validation error returned by
// UpdateChannelRequest.Validate if the designated constraints aren't met.
type UpdateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelRequestValidationError) ErrorName() string {
	return "UpdateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelRequestValidationError{}

// Validate checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChannelRequestMultiError, or nil if none found.
func (m *DeleteChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteChannelRequestMultiError(errors)
	}

	return nil
}

// DeleteChannelRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChannelRequestMultiError) AllErrors() []error { return m }

// DeleteChannelRequestValidationError is the validation error returned by
// DeleteChannelRequest.Validate if the designated constraints aren't met.
type DeleteChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChannelRequestValidationError) ErrorName() string {
	return "DeleteChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChannelRequestValidationError{}

// Validate checks the field values on Channel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Channel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChannelMultiError, or nil if none found.
func (m *Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.ChannelType.(type) {
	case *Channel_Telegram:
		if v == nil {
			err := ChannelValidationError{
				field:  "ChannelType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTelegram()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelValidationError{
						field:  "Telegram",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelValidationError{
						field:  "Telegram",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTelegram()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelValidationError{
					field:  "Telegram",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Channel_Matrix:
		if v == nil {
			err := ChannelValidationError{
				field:  "ChannelType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMatrix()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelValidationError{
						field:  "Matrix",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelValidationError{
						field:  "Matrix",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMatrix()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ChannelMultiError(errors)
	}

	return nil
}

// ChannelMultiError is an error wrapping multiple validation errors returned
// by Channel.ValidateAll() if the designated constraints aren't met.
type ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelMultiError) AllErrors() []error { return m }

// ChannelValidationError is the validation error returned by Channel.Validate
// if the designated constraints aren't met.
type ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelValidationError) ErrorName() string { return "ChannelValidationError" }

// Error satisfies the builtin error interface
func (e ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelValidationError{}

// Validate checks the field values on TelegramChat with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TelegramChat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelegramChat with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TelegramChatMultiError, or
// nil if none found.
func (m *TelegramChat) ValidateAll() error {
	return m.validate(true)
}

func (m *TelegramChat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Name

	if len(errors) > 0 {
		return TelegramChatMultiError(errors)
	}

	return nil
}

// TelegramChatMultiError is an error wrapping multiple validation errors
// returned by TelegramChat.ValidateAll() if the designated constraints aren't met.
type TelegramChatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelegramChatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelegramChatMultiError) AllErrors() []error { return m }

// TelegramChatValidationError is the validation error returned by
// TelegramChat.Validate if the designated constraints aren't met.
type TelegramChatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelegramChatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelegramChatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelegramChatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelegramChatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelegramChatValidationError) ErrorName() string { return "TelegramChatValidationError" }

// Error satisfies the builtin error interface
func (e TelegramChatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelegramChat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelegramChatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelegramChatValidationError{}

// Validate checks the field values on MatrixChannel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MatrixChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MatrixChannel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MatrixChannelMultiError, or
// nil if none found.
func (m *MatrixChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *MatrixChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for Name

	if len(errors) > 0 {
		return MatrixChannelMultiError(errors)
	}

	return nil
}

// MatrixChannelMultiError is an error wrapping multiple validation errors
// returned by MatrixChannel.ValidateAll() if the designated constraints
// aren't met.
type MatrixChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatrixChannelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatrixChannelMultiError) AllErrors() []error { return m }

// MatrixChannelValidationError is the validation error returned by
// MatrixChannel.Validate if the designated constraints aren't met.
type MatrixChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatrixChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatrixChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatrixChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatrixChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatrixChannelValidationError) ErrorName() string { return "MatrixChannelValidationError" }

// Error satisfies the builtin error interface
func (e MatrixChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatrixChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatrixChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatrixChannelValidationError{}

// Validate checks the field values on ListCalendarChannelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarChannelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarChannelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarChannelsRequestMultiError, or nil if none found.
func (m *ListCalendarChannelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarChannelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CalendarId

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListCalendarChannelsRequestMultiError(errors)
	}

	return nil
}

// ListCalendarChannelsRequestMultiError is an error wrapping multiple
// validation errors returned by ListCalendarChannelsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCalendarChannelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarChannelsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarChannelsRequestMultiError) AllErrors() []error { return m }

// ListCalendarChannelsRequestValidationError is the validation error returned
// by ListCalendarChannelsRequest.Validate if the designated constraints
// aren't met.
type ListCalendarChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarChannelsRequestValidationError) ErrorName() string {
	return "ListCalendarChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarChannelsRequestValidationError{}

// Validate checks the field values on ListCalendarChannelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarChannelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarChannelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarChannelsResponseMultiError, or nil if none found.
func (m *ListCalendarChannelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarChannelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCalendarChannelsResponseValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCalendarChannelsResponseValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarChannelsResponseValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListCalendarChannelsResponseMultiError(errors)
	}

	return nil
}

// ListCalendarChannelsResponseMultiError is an error wrapping multiple
// validation errors returned by ListCalendarChannelsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCalendarChannelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarChannelsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarChannelsResponseMultiError) AllErrors() []error { return m }

// ListCalendarChannelsResponseValidationError is the validation error returned
// by ListCalendarChannelsResponse.Validate if the designated constraints
// aren't met.
type ListCalendarChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarChannelsResponseValidationError) ErrorName() string {
	return "ListCalendarChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarChannelsResponseValidationError{}

// Validate checks the field values on CreateCalendarChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCalendarChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCalendarChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCalendarChannelRequestMultiError, or nil if none found.
func (m *CreateCalendarChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCalendarChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CalendarId

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return CreateCalendarChannelRequestMultiError(errors)
	}

	return nil
}

// CreateCalendarChannelRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCalendarChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCalendarChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCalendarChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCalendarChannelRequestMultiError) AllErrors() []error { return m }

// CreateCalendarChannelRequestValidationError is the validation error returned
// by CreateCalendarChannelRequest.Validate if the designated constraints
// aren't met.
type CreateCalendarChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCalendarChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCalendarChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCalendarChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCalendarChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCalendarChannelRequestValidationError) ErrorName() string {
	return "CreateCalendarChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCalendarChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCalendarChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCalendarChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCalendarChannelRequestValidationError{}

// Validate checks the field values on DeleteCalendarChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCalendarChannelRequestMultiError, or nil if none found.
func (m *DeleteCalendarChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CalendarId

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return DeleteCalendarChannelRequestMultiError(errors)
	}

	return nil
}

// DeleteCalendarChannelRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCalendarChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCalendarChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarChannelRequestMultiError) AllErrors() []error { return m }

// DeleteCalendarChannelRequestValidationError is the validation error returned
// by DeleteCalendarChannelRequest.Validate if the designated constraints
// aren't met.
type DeleteCalendarChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarChannelRequestValidationError) ErrorName() string {
	return "DeleteCalendarChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarChannelRequestValidationError{}

// Validate checks the field values on PageToken with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageToken with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageTokenMultiError, or nil
// if none found.
func (m *PageToken) ValidateAll() error {
	return m.validate(true)
}

func (m *PageToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastId

	if len(errors) > 0 {
		return PageTokenMultiError(errors)
	}

	return nil
}

// PageTokenMultiError is an error wrapping multiple validation errors returned
// by PageToken.ValidateAll() if the designated constraints aren't met.
type PageTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageTokenMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageTokenMultiError) AllErrors() []error { return m }

// PageTokenValidationError is the validation error returned by
// PageToken.Validate if the designated constraints aren't met.
type PageTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageTokenValidationError) ErrorName() string { return "PageTokenValidationError" }

// Error satisfies the builtin error interface
func (e PageTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageTokenValidationError{}
